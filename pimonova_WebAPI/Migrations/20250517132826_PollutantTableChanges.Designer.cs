// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using pimonova_WebAPI.Data;

#nullable disable

namespace pimonova_WebAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250517132826_PollutantTableChanges")]
    partial class PollutantTableChanges
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("pimonova_WebAPI.Models.Company", b =>
                {
                    b.Property<int>("CompanyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CompanyID"));

                    b.Property<string>("CurrAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("INN")
                        .HasColumnType("bigint");

                    b.Property<int>("KPP")
                        .HasColumnType("integer");

                    b.Property<string>("LineOfWork")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("OGRN")
                        .HasColumnType("bigint");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RegAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CompanyID");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("pimonova_WebAPI.Models.GasCleaner", b =>
                {
                    b.Property<int>("GasCleanerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GasCleanerID"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumberInCompany")
                        .HasColumnType("integer");

                    b.Property<int?>("SectorID")
                        .HasColumnType("integer");

                    b.Property<int?>("StationaryIZAVID")
                        .HasColumnType("integer");

                    b.Property<int?>("StationaryIZAVToOut")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("GasCleanerID");

                    b.HasIndex("SectorID");

                    b.HasIndex("StationaryIZAVID");

                    b.ToTable("GasCleaners");
                });

            modelBuilder.Entity("pimonova_WebAPI.Models.InstrumentalEmissionMeasuring", b =>
                {
                    b.Property<int>("ResultID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ResultID"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<float>("DiameterOfWasteGas")
                        .HasColumnType("real");

                    b.Property<short>("PressureOfWasteGas")
                        .HasColumnType("smallint");

                    b.Property<float>("SpeedOfWasteGas")
                        .HasColumnType("real");

                    b.Property<int?>("StationaryIZAVID")
                        .HasColumnType("integer");

                    b.Property<short>("TemperatureOfWasteGas")
                        .HasColumnType("smallint");

                    b.Property<float>("TrueVolumetricFlowRateOfWasteGas")
                        .HasColumnType("real");

                    b.Property<float>("VolumetricFlowRateOfWasteGasNC")
                        .HasColumnType("real");

                    b.Property<float>("WaterVaporConcentration")
                        .HasColumnType("real");

                    b.HasKey("ResultID");

                    b.HasIndex("StationaryIZAVID");

                    b.ToTable("InstrumentalEmissionMeasurings");
                });

            modelBuilder.Entity("pimonova_WebAPI.Models.InstrumentalEmissionMeasuring_Pollutant", b =>
                {
                    b.Property<int>("InstrumentalEmissionMeasuringID")
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    b.Property<int>("PollutantID")
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    b.Property<float>("MassConcentration")
                        .HasColumnType("real");

                    b.Property<float>("MaxPollutantEmission")
                        .HasColumnType("real");

                    b.Property<float>("MeanPollutantEmission")
                        .HasColumnType("real");

                    b.Property<string>("MeasuringMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("PollutantEmission")
                        .HasColumnType("real");

                    b.HasKey("InstrumentalEmissionMeasuringID", "PollutantID");

                    b.HasIndex("PollutantID");

                    b.ToTable("InstrumentalEmissionMeasurings_Pollutants");
                });

            modelBuilder.Entity("pimonova_WebAPI.Models.MobileIZAV", b =>
                {
                    b.Property<int>("MobileIZAVID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MobileIZAVID"));

                    b.Property<short>("AmountOfIZAVWithOneNumber")
                        .HasColumnType("smallint");

                    b.Property<string>("Fuel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumberInCompany")
                        .HasColumnType("integer");

                    b.Property<int?>("SectorID")
                        .HasColumnType("integer");

                    b.Property<short>("Speed")
                        .HasColumnType("smallint");

                    b.Property<short>("WorkingHoursPerSeason")
                        .HasColumnType("smallint");

                    b.Property<short>("WorkingHoursPerYear")
                        .HasColumnType("smallint");

                    b.HasKey("MobileIZAVID");

                    b.HasIndex("SectorID");

                    b.ToTable("MobileIZAVs");
                });

            modelBuilder.Entity("pimonova_WebAPI.Models.MobileIZAV_Pollutant", b =>
                {
                    b.Property<int>("MobileIZAVID")
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    b.Property<int>("PollutantID")
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    b.Property<float>("MaxPollutantEmission")
                        .HasColumnType("real");

                    b.Property<float>("MeanPollutantEmission")
                        .HasColumnType("real");

                    b.Property<string>("MeasuringMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("MobileIZAVID", "PollutantID");

                    b.HasIndex("PollutantID");

                    b.ToTable("MobileIZAVs_Pollutants");
                });

            modelBuilder.Entity("pimonova_WebAPI.Models.ModeOfIZAVWithNonStationaryEmissions", b =>
                {
                    b.Property<int>("ModeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ModeID"));

                    b.Property<string>("ModeDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("ModeNumberInCompany")
                        .HasColumnType("smallint");

                    b.Property<short>("TimeOfWorking")
                        .HasColumnType("smallint");

                    b.HasKey("ModeID");

                    b.ToTable("ModesOfIZAVWithNonStationaryEmissions");
                });

            modelBuilder.Entity("pimonova_WebAPI.Models.ObjectOfNEI", b =>
                {
                    b.Property<int>("ObjectOfNEIID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ObjectOfNEIID"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("CompanyID")
                        .HasColumnType("integer");

                    b.Property<string>("LocationAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ObjectOfNEIID");

                    b.HasIndex("CompanyID");

                    b.ToTable("ObjectsOfNEI");
                });

            modelBuilder.Entity("pimonova_WebAPI.Models.Pollutant", b =>
                {
                    b.Property<int>("PollutantID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PollutantID"));

                    b.Property<int>("Code")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PollutantID");

                    b.ToTable("Pollutants");
                });

            modelBuilder.Entity("pimonova_WebAPI.Models.ResultOfGasCleanersInspection", b =>
                {
                    b.Property<int>("ResultID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ResultID"));

                    b.Property<int?>("GasCleanerID")
                        .HasColumnType("integer");

                    b.Property<short>("ProjectCleaningDegree")
                        .HasColumnType("smallint");

                    b.Property<float>("ProjectProvisionCoeff")
                        .HasColumnType("real");

                    b.Property<short>("TrueCleaningDegree")
                        .HasColumnType("smallint");

                    b.Property<float>("TrueProvisionCoeff")
                        .HasColumnType("real");

                    b.HasKey("ResultID");

                    b.HasIndex("GasCleanerID");

                    b.ToTable("ResultsOfGasCleanersInspection");
                });

            modelBuilder.Entity("pimonova_WebAPI.Models.ResultOfGasCleanersInspection_Pollutant", b =>
                {
                    b.Property<int>("ResultOfGasCleanersInspectionID")
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    b.Property<int>("PollutantID")
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    b.HasKey("ResultOfGasCleanersInspectionID", "PollutantID");

                    b.HasIndex("PollutantID");

                    b.ToTable("ResultsOfGasCleanersInspection_Pollutants");
                });

            modelBuilder.Entity("pimonova_WebAPI.Models.Sector", b =>
                {
                    b.Property<int>("SectorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SectorID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumberInCompany")
                        .HasColumnType("integer");

                    b.Property<int?>("WorkshopID")
                        .HasColumnType("integer");

                    b.HasKey("SectorID");

                    b.HasIndex("WorkshopID");

                    b.ToTable("Sectors");
                });

            modelBuilder.Entity("pimonova_WebAPI.Models.SourceOfPollutants", b =>
                {
                    b.Property<int>("SourceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SourceID"));

                    b.Property<short>("AmountOfSOPWithOneNumber")
                        .HasColumnType("smallint");

                    b.Property<int?>("GasCleanerID")
                        .HasColumnType("integer");

                    b.Property<short?>("ModeNumber")
                        .HasColumnType("smallint");

                    b.Property<int?>("ModeOfIZAVWithNonStationaryEmissionsModeID")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumberInCompany")
                        .HasColumnType("integer");

                    b.Property<int?>("SectorID")
                        .HasColumnType("integer");

                    b.Property<int?>("StationaryIZAVID")
                        .HasColumnType("integer");

                    b.Property<short>("WorkingHoursPerDay")
                        .HasColumnType("smallint");

                    b.Property<short>("WorkingHoursPerYear")
                        .HasColumnType("smallint");

                    b.HasKey("SourceID");

                    b.HasIndex("GasCleanerID");

                    b.HasIndex("ModeOfIZAVWithNonStationaryEmissionsModeID");

                    b.HasIndex("SectorID");

                    b.HasIndex("StationaryIZAVID");

                    b.ToTable("SourcesOfPollutants");
                });

            modelBuilder.Entity("pimonova_WebAPI.Models.SourceOfPollutants_Pollutant", b =>
                {
                    b.Property<int>("SourceOfPollutantsID")
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    b.Property<int>("PollutantID")
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    b.Property<float>("PollutantAmountGramsPerSecond")
                        .HasColumnType("real");

                    b.Property<float>("PollutantAmountTonsPerYear")
                        .HasColumnType("real");

                    b.Property<float>("TotalPollutantAmountTonsPerYear")
                        .HasColumnType("real");

                    b.HasKey("SourceOfPollutantsID", "PollutantID");

                    b.HasIndex("PollutantID");

                    b.ToTable("SourcesOfPollutants_Pollutants");
                });

            modelBuilder.Entity("pimonova_WebAPI.Models.StationaryIZAV", b =>
                {
                    b.Property<int>("StationaryIZAVID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StationaryIZAVID"));

                    b.Property<short>("AmountOfIZAVWithOneNumber")
                        .HasColumnType("smallint");

                    b.Property<float>("ArealZAVWidth")
                        .HasColumnType("real");

                    b.Property<float>("DensityOfGAM")
                        .HasColumnType("real");

                    b.Property<float>("EstuaryDiameter")
                        .HasColumnType("real");

                    b.Property<float>("EstuaryLength")
                        .HasColumnType("real");

                    b.Property<float>("EstuaryWidth")
                        .HasColumnType("real");

                    b.Property<float>("IZAVHeight")
                        .HasColumnType("real");

                    b.Property<short>("ModeNumber")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumberInCompany")
                        .HasColumnType("integer");

                    b.Property<float>("OutputSpeedOfGAM")
                        .HasColumnType("real");

                    b.Property<int?>("SectorID")
                        .HasColumnType("integer");

                    b.Property<short>("TemperatureOfGAM")
                        .HasColumnType("smallint");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("VolumeOfGAM")
                        .HasColumnType("real");

                    b.HasKey("StationaryIZAVID");

                    b.HasIndex("SectorID");

                    b.ToTable("StationaryIZAVs");
                });

            modelBuilder.Entity("pimonova_WebAPI.Models.StationaryIZAV_Pollutant", b =>
                {
                    b.Property<int>("StationaryIZAVID")
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    b.Property<int>("PollutantID")
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    b.Property<float>("GrossPollutantEmissionTonsPerYear")
                        .HasColumnType("real");

                    b.Property<float>("PollutantConcentration")
                        .HasColumnType("real");

                    b.Property<float>("PollutantEmissionPower")
                        .HasColumnType("real");

                    b.Property<float>("TotalPollutantEmissionTonsPerPeriod")
                        .HasColumnType("real");

                    b.HasKey("StationaryIZAVID", "PollutantID");

                    b.HasIndex("PollutantID");

                    b.ToTable("StationaryIZAVs_Pollutants");
                });

            modelBuilder.Entity("pimonova_WebAPI.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserID"));

                    b.Property<int?>("CompanyID")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserID");

                    b.HasIndex("CompanyID");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("pimonova_WebAPI.Models.Workshop", b =>
                {
                    b.Property<int>("WorkshopID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WorkshopID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumberInCompany")
                        .HasColumnType("integer");

                    b.Property<int?>("ObjectOfNEIID")
                        .HasColumnType("integer");

                    b.HasKey("WorkshopID");

                    b.HasIndex("ObjectOfNEIID");

                    b.ToTable("Workshops");
                });

            modelBuilder.Entity("pimonova_WebAPI.Models.GasCleaner", b =>
                {
                    b.HasOne("pimonova_WebAPI.Models.Sector", "Sector")
                        .WithMany("GasCleaners")
                        .HasForeignKey("SectorID");

                    b.HasOne("pimonova_WebAPI.Models.StationaryIZAV", "StationaryIZAV")
                        .WithMany("GasCleaners")
                        .HasForeignKey("StationaryIZAVID");

                    b.Navigation("Sector");

                    b.Navigation("StationaryIZAV");
                });

            modelBuilder.Entity("pimonova_WebAPI.Models.InstrumentalEmissionMeasuring", b =>
                {
                    b.HasOne("pimonova_WebAPI.Models.StationaryIZAV", "StationaryIZAV")
                        .WithMany("InstrumentalEmissionMeasuringsOfSIZAV")
                        .HasForeignKey("StationaryIZAVID");

                    b.Navigation("StationaryIZAV");
                });

            modelBuilder.Entity("pimonova_WebAPI.Models.InstrumentalEmissionMeasuring_Pollutant", b =>
                {
                    b.HasOne("pimonova_WebAPI.Models.InstrumentalEmissionMeasuring", "InstrumentalEmissionMeasuring")
                        .WithMany("InstrumentalEmissionMeasurings_Pollutants")
                        .HasForeignKey("InstrumentalEmissionMeasuringID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("pimonova_WebAPI.Models.Pollutant", "Pollutant")
                        .WithMany("InstrumentalEmissionMeasurings_Pollutants")
                        .HasForeignKey("PollutantID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("InstrumentalEmissionMeasuring");

                    b.Navigation("Pollutant");
                });

            modelBuilder.Entity("pimonova_WebAPI.Models.MobileIZAV", b =>
                {
                    b.HasOne("pimonova_WebAPI.Models.Sector", "Sector")
                        .WithMany("MobileIZAVs")
                        .HasForeignKey("SectorID");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("pimonova_WebAPI.Models.MobileIZAV_Pollutant", b =>
                {
                    b.HasOne("pimonova_WebAPI.Models.MobileIZAV", "MobileIZAV")
                        .WithMany("MobileIZAVs_Pollutants")
                        .HasForeignKey("MobileIZAVID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("pimonova_WebAPI.Models.Pollutant", "Pollutant")
                        .WithMany("MobileIZAVs_Pollutants")
                        .HasForeignKey("PollutantID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MobileIZAV");

                    b.Navigation("Pollutant");
                });

            modelBuilder.Entity("pimonova_WebAPI.Models.ObjectOfNEI", b =>
                {
                    b.HasOne("pimonova_WebAPI.Models.Company", "Company")
                        .WithMany("ObjectOfNEI")
                        .HasForeignKey("CompanyID");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("pimonova_WebAPI.Models.ResultOfGasCleanersInspection", b =>
                {
                    b.HasOne("pimonova_WebAPI.Models.GasCleaner", "GasCleaner")
                        .WithMany("ResultsOfGasCleanersInspection")
                        .HasForeignKey("GasCleanerID");

                    b.Navigation("GasCleaner");
                });

            modelBuilder.Entity("pimonova_WebAPI.Models.ResultOfGasCleanersInspection_Pollutant", b =>
                {
                    b.HasOne("pimonova_WebAPI.Models.Pollutant", "Pollutant")
                        .WithMany("ResultsOfGasCleanersInspection_Pollutants")
                        .HasForeignKey("PollutantID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("pimonova_WebAPI.Models.ResultOfGasCleanersInspection", "ResultOfGasCleanersInspection")
                        .WithMany("ResultsOfGasCleanersInspection_Pollutants")
                        .HasForeignKey("ResultOfGasCleanersInspectionID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Pollutant");

                    b.Navigation("ResultOfGasCleanersInspection");
                });

            modelBuilder.Entity("pimonova_WebAPI.Models.Sector", b =>
                {
                    b.HasOne("pimonova_WebAPI.Models.Workshop", "Workshop")
                        .WithMany("Sectors")
                        .HasForeignKey("WorkshopID");

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("pimonova_WebAPI.Models.SourceOfPollutants", b =>
                {
                    b.HasOne("pimonova_WebAPI.Models.GasCleaner", "GasCleaner")
                        .WithMany("SourcesOfPollutants")
                        .HasForeignKey("GasCleanerID");

                    b.HasOne("pimonova_WebAPI.Models.ModeOfIZAVWithNonStationaryEmissions", "ModeOfIZAVWithNonStationaryEmissions")
                        .WithMany("SourcesOfPollutants")
                        .HasForeignKey("ModeOfIZAVWithNonStationaryEmissionsModeID");

                    b.HasOne("pimonova_WebAPI.Models.Sector", "Sector")
                        .WithMany("SourcesOfPollutants")
                        .HasForeignKey("SectorID");

                    b.HasOne("pimonova_WebAPI.Models.StationaryIZAV", "StationaryIZAV")
                        .WithMany("SourcesOfPollutants")
                        .HasForeignKey("StationaryIZAVID");

                    b.Navigation("GasCleaner");

                    b.Navigation("ModeOfIZAVWithNonStationaryEmissions");

                    b.Navigation("Sector");

                    b.Navigation("StationaryIZAV");
                });

            modelBuilder.Entity("pimonova_WebAPI.Models.SourceOfPollutants_Pollutant", b =>
                {
                    b.HasOne("pimonova_WebAPI.Models.Pollutant", "Pollutant")
                        .WithMany("SourcesOfPollutants_Pollutants")
                        .HasForeignKey("PollutantID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("pimonova_WebAPI.Models.SourceOfPollutants", "SourceOfPollutants")
                        .WithMany("SourcesOfPollutants_Pollutants")
                        .HasForeignKey("SourceOfPollutantsID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Pollutant");

                    b.Navigation("SourceOfPollutants");
                });

            modelBuilder.Entity("pimonova_WebAPI.Models.StationaryIZAV", b =>
                {
                    b.HasOne("pimonova_WebAPI.Models.Sector", "Sector")
                        .WithMany("StationaryIZAVs")
                        .HasForeignKey("SectorID");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("pimonova_WebAPI.Models.StationaryIZAV_Pollutant", b =>
                {
                    b.HasOne("pimonova_WebAPI.Models.Pollutant", "Pollutant")
                        .WithMany("StationaryIZAVs_Pollutants")
                        .HasForeignKey("PollutantID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("pimonova_WebAPI.Models.StationaryIZAV", "StationaryIZAV")
                        .WithMany("StationaryIZAVs_Pollutants")
                        .HasForeignKey("StationaryIZAVID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Pollutant");

                    b.Navigation("StationaryIZAV");
                });

            modelBuilder.Entity("pimonova_WebAPI.Models.User", b =>
                {
                    b.HasOne("pimonova_WebAPI.Models.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyID");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("pimonova_WebAPI.Models.Workshop", b =>
                {
                    b.HasOne("pimonova_WebAPI.Models.ObjectOfNEI", "ObjectOfNEI")
                        .WithMany("Workshops")
                        .HasForeignKey("ObjectOfNEIID");

                    b.Navigation("ObjectOfNEI");
                });

            modelBuilder.Entity("pimonova_WebAPI.Models.Company", b =>
                {
                    b.Navigation("ObjectOfNEI");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("pimonova_WebAPI.Models.GasCleaner", b =>
                {
                    b.Navigation("ResultsOfGasCleanersInspection");

                    b.Navigation("SourcesOfPollutants");
                });

            modelBuilder.Entity("pimonova_WebAPI.Models.InstrumentalEmissionMeasuring", b =>
                {
                    b.Navigation("InstrumentalEmissionMeasurings_Pollutants");
                });

            modelBuilder.Entity("pimonova_WebAPI.Models.MobileIZAV", b =>
                {
                    b.Navigation("MobileIZAVs_Pollutants");
                });

            modelBuilder.Entity("pimonova_WebAPI.Models.ModeOfIZAVWithNonStationaryEmissions", b =>
                {
                    b.Navigation("SourcesOfPollutants");
                });

            modelBuilder.Entity("pimonova_WebAPI.Models.ObjectOfNEI", b =>
                {
                    b.Navigation("Workshops");
                });

            modelBuilder.Entity("pimonova_WebAPI.Models.Pollutant", b =>
                {
                    b.Navigation("InstrumentalEmissionMeasurings_Pollutants");

                    b.Navigation("MobileIZAVs_Pollutants");

                    b.Navigation("ResultsOfGasCleanersInspection_Pollutants");

                    b.Navigation("SourcesOfPollutants_Pollutants");

                    b.Navigation("StationaryIZAVs_Pollutants");
                });

            modelBuilder.Entity("pimonova_WebAPI.Models.ResultOfGasCleanersInspection", b =>
                {
                    b.Navigation("ResultsOfGasCleanersInspection_Pollutants");
                });

            modelBuilder.Entity("pimonova_WebAPI.Models.Sector", b =>
                {
                    b.Navigation("GasCleaners");

                    b.Navigation("MobileIZAVs");

                    b.Navigation("SourcesOfPollutants");

                    b.Navigation("StationaryIZAVs");
                });

            modelBuilder.Entity("pimonova_WebAPI.Models.SourceOfPollutants", b =>
                {
                    b.Navigation("SourcesOfPollutants_Pollutants");
                });

            modelBuilder.Entity("pimonova_WebAPI.Models.StationaryIZAV", b =>
                {
                    b.Navigation("GasCleaners");

                    b.Navigation("InstrumentalEmissionMeasuringsOfSIZAV");

                    b.Navigation("SourcesOfPollutants");

                    b.Navigation("StationaryIZAVs_Pollutants");
                });

            modelBuilder.Entity("pimonova_WebAPI.Models.Workshop", b =>
                {
                    b.Navigation("Sectors");
                });
#pragma warning restore 612, 618
        }
    }
}
